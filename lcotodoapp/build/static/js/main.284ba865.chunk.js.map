{"version":3,"sources":["image.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","newItem","list","todoValue","id","Date","now","value","isDone","this","push","setState","updateList","filter","item","input","src","logo","width","height","className","alt","onClick","type","placeholder","required","onChange","e","updateInput","target","addItem","disabled","length","map","key","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,mC,8MCsG5BC,G,wDA/Fb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,KAAO,IAJO,E,oDAQVC,GAEN,GAAe,KAAZA,EACH,CACI,IAAMF,EAAS,CACfG,GAAGC,KAAKC,MACRC,MAAMJ,EACNK,QAAO,GAEDN,EAAI,YAAMO,KAAKT,MAAME,MAC3BA,EAAKQ,KAAKT,GAEVQ,KAAKE,SAAS,CACdT,OACAD,QAAQ,Q,iCAKFG,GAEV,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACJW,QAAO,SAAAC,GAE3B,OAAOA,EAAKV,KAAKA,KAErBK,KAAKE,SAAS,CACZT,KAAKU,M,kCAIGG,GAEVN,KAAKE,SAAS,CACZV,QAAQc,M,+BAMH,IAAD,OACN,OACC,6BACE,iCAGA,yBAAKC,IAAKC,IAAMC,MAAM,MAAMC,OAAQ,MAAMC,UAAU,OAAOC,IAAI,2BAC/D,wBAAID,UAAU,aAAd,oBAEA,uBAAGA,UAAU,WAAb,wBAA4C,kCAAO,4BAASA,UAAU,MAAME,QAAQ,IAAjC,YAGnD,yBAAKF,UAAU,aAAf,kBAEA,6BACA,2BAAOG,KAAK,OAAOH,UAAU,aAAaI,YAAY,cAAcC,UAAQ,EAAElB,MAAOE,KAAKT,MAAMC,QAChGyB,SAAW,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOtB,UAE1C,4BACAe,QAAU,kBACV,EAAKQ,QAAQ,EAAK9B,MAAMC,UACxB8B,UAAWtB,KAAKT,MAAMC,QAAQ+B,OAC9BZ,UAAU,WAJV,YAKA,yBAAKA,UAAU,QACf,4BACGX,KAAKT,MAAME,KAAK+B,KACb,SAAAnB,GACE,OACC,wBAAIoB,IAAKpB,EAAKV,IACXU,EAAKP,MACN,4BAASa,UAAU,MAAME,QAAS,kBAAK,EAAKa,WAAWrB,EAAKV,MAA5D,sB,GAhFAgC,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.284ba865.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.b6d00022.jpg\";","import  React from 'react'\nimport logo  from './image.jpg'\nimport './App.css'\n\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props)\n    this.state = {\n      newItem :\"\",\n      list : []\n    }\n  }\n\n  addItem(todoValue)\n  {\n    if(todoValue!==\"\")\n    {\n        const newItem ={\n        id:Date.now(),\n        value:todoValue,\n        isDone:false\n        }\n        const list =[...this.state.list] // ... means append all  the existing value of list in list\n        list.push(newItem)\n        //now list in local scope\n        this.setState({\n        list,\n        newItem:\"\"\n      })\n    }\n  }\n\n  deleteItem (id)\n  {\n    const list = [...this.state.list] //current copy of list\n    const updateList = list.filter(item=>\n    {\n        return item.id!==id\n    }) //skip the list which id we have in the argument of deleteItem\n    this.setState({\n      list:updateList\n    })\n  }\n\n  updateInput(input)\n  {\n    this.setState({\n      newItem:input\n    })\n  }\n\n \n\n  render(){\n    return(\n     <div>\n       <script>\n         \n       </script>\n       <img src={logo} width=\"300\" height =\"200\" className=\"logo\" alt=\"This is pic of one Car\"/>\n       <h1 className=\"app-title\">Vishu's ToDo APP</h1>\n       \n       <p className=\"app-tit\">FOR DELETING , CLICK <span> <button  className=\"b-t\" onClick=\"\">Delete</button></span></p>\n       \n       \n       <div className=\"container\">\n       Add an Item.... \n       <br/>\n       <input type=\"text\" className=\"input-text\" placeholder=\"Write To Do\" required  value={this.state.newItem}  \n       onChange={ e => this.updateInput(e.target.value)} >\n       </input>\n       <button\n       onClick ={()=>\n       this.addItem(this.state.newItem)}\n       disabled={!this.state.newItem.length} ///for disabling \n       className=\"add-btn\">Add ToDo</button>\n       <div className=\"list\">\n       <ul>\n         {this.state.list.map(\n             item=>{\n               return (\n                <li key={item.id}>\n                  {item.value}\n                  <button  className=\"btn\" onClick={()=> this.deleteItem(item.id)}>\n                  Delete</button>\n\n                </li> \n               )\n             }\n           )}\n         \n         </ul>\n        </div>\n      </div>\n     </div>\n    )\n  }\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}